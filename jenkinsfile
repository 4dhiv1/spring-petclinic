pipeline {
    agent any 
    tools {
        maven 'Maven'
    }
    environment {
        IMAGE_NAME  = "sprinbootapp"
        IMAGE_TAG  = "latest"
        ACR_NAME    = "azconreg25"
        ACR_LOGIN_SERVER = "azconreg25.azurecr.io"
        FULL_IMAGE_NAME = "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
        TENANT_ID   = "573c6803-d356-4c52-be17-547f193cd7a5"
        RESOURCE_GROUP = "bootcamp-1"
        CLUSTER_NAME    = "aksclust25"
    }
    stages {
        stage('Checkout from Git') { 
            steps {
               git branch: 'main', url: 'https://github.com/4dhiv1/spring-petclinic.git'
            }
        }
        stage('Maven Validate') { 
            steps {
               sh 'mvn validate'
            }
        }
        stage('Maven Compile') { 
            steps {
               sh 'mvn compile'
            }
        }
        stage('Sonar Analysis') { 
            environment {
                SCANNER_HOME = tool 'sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonarserver'){
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.organization=4dhiv1 \
                    -Dsonar.projectName=petclinic-boot1 \
                    -Dsonar.projectKey=4dhiv1_petclinic-boot1 \
                    -Dsonar.java.binaries=.
                    '''
                } 
            }
        }
        stage('Maven Package') { 
            steps {
               sh 'mvn package'
            }
        }
    //     stage('Sonar Quality Gate') {
    //      steps {
    //         timeout(time: 1, unit: 'MINUTES') {
    //             waitForQualityGate abortPipeline: true, credentialsId: 'sonar'
    //         }
    //      }
    //    }
       stage('Docker Build'){
        steps {
            script {
                echo "Docker Image Build"
                docker.build("${IMAGE_NAME}:${IMAGE_TAG}", ".devcontainer")
            }
        }
       }
       stage ('Azure Login to ACR') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'azure-acr-sp', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD' )]) {
               script {
                echo "Login to Azure" 
                sh '''
                az login --service-principal -u $AZURE_USERNAME -p $AZURE_PASSWORD --tenant $TENANT_ID
                az acr login --name $ACR_NAME       
                '''
                }
            }
         }
       }
       stage ('Docker Push to ACR') {
        steps {
            script {
                echo "Docker Image Push"
                sh '''
                docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${FULL_IMAGE_NAME}
                docker push ${FULL_IMAGE_NAME}
                '''
            }
         }
       }
       stage ('Login to AKS Cluster') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'azure-acr-sp', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD' )]) {
            script {
                echo "Azure Login to AKS"
                sh '''
                az login --service-principal -u $AZURE_USERNAME -p $AZURE_PASSWORD --tenant $TENANT_ID
                az aks get-credentials --resource-group $RESOURCE_GROUP   --name $CLUSTER_NAME --overwrite-existing
                '''
             }
            }
          }
       }
//        stage ('Deploy to AKS') {
//         steps {
//             withCredentials([usernamePassword(credentialsId: 'azure-acr-sp', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD' )]) {
//             script {
//                 echo "Azure Login to AKS"
//                 sh '''
//                 az login --service-principal -u $AZURE_USERNAME -p $AZURE_PASSWORD --tenant $TENANT_ID
//                 kubectl apply -f k8s/sprinboot-deployment.yaml
//                 '''
//              }
//             }
//           }
//        }
    }
}