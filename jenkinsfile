pipeline {
    agent any

    tools {
        maven 'Maven' // Make sure this matches your Jenkins Maven installation name
    }

    environment {
        ImageName = 'spring-app'          // Docker image name
        BUILD_TAG = "latest"              // Docker image tag
    }

    stages {
        stage('Checkout From Git') {
            steps {
                git branch: 'main', url: 'https://github.com/4dhiv1/spring-petclinic.git'
            }
        }

        stage('Maven Validate') {
            steps {
                sh 'mvn validate'
            }
        }

        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Maven Package') {
            steps {
                sh 'mvn package'
            }
        }

        stage('SonarCloud Analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-scanner' // Make sure this matches Jenkins tool config
            }
            steps {
                withSonarQubeEnv('sonarserver') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.organization=Adhithyaa \
                        -Dsonar.projectName=petclinic-boot1 \
                        -Dsonar.projectKey=4dhiv1_petclinic-boot1 \
                        -Dsonar.sources=src \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=https://sonarcloud.io
                    '''
                }
            }
        }

        stage('Publish Sonar Report') {
            steps {
                withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=4dhiv1_petclinic-boot1 \
                        -Dsonar.organization=Adhithyaa \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.qualitygate.wait=false
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${ImageName}:${BUILD_TAG} -f .devcontainer/Dockerfile .
                    docker tag ${ImageName}:${BUILD_TAG} azconreg25.azurecr.io/${ImageName}:${BUILD_TAG}
                '''
            }
        }

        stage('Trivy Scan') {
            steps {
                sh '''
                    trivy image --format table --severity HIGH,CRITICAL \
                        --output trivy-report.txt azconreg25.azurecr.io/${ImageName}:${BUILD_TAG}
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.txt'
                }
            }
        }

        stage('Login to ACR and Push Image') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'e029c5e3-c2a4-4976-b820-f3d475ec27cd', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD'),
                    string(credentialsId: 'azure-tenant', variable: 'TENANT_ID')
                ]) {
                    sh '''
                        az login --service-principal -u "$AZURE_USERNAME" -p "$AZURE_PASSWORD" --tenant "$TENANT_ID"
                        az acr login --name azconreg25
                        docker push azconreg25.azurecr.io/${ImageName}:${BUILD_TAG}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    az aks get-credentials --resource-group bootcamp-1 --name aksclust25
                    kubectl apply -f k8s/petclinic.yml
                    kubectl get all
                '''
            }
        }
    }
}
